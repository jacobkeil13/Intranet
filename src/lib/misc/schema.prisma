generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model UserAccount {
  id            String @id @default(uuid())
  email         String @unique
  passwordHash  String
  userAuthToken String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProfile {
  id                           String                  @id @default(uuid())
  netid                        String
  first_name                   String
  last_name                    String
  phone                        String
  uidRange                     String?
  directReport                 UserProfile?            @relation("DirectReport", fields: [userProfileId], references: [id])
  team                         Team[]
  title                        Title                   @relation(fields: [titleId], references: [id])
  role                         Role                    @relation(fields: [roleId], references: [id])
  queueItemRequestedBy         QueueItem[]             @relation("RequestedBy")
  queueItemAssignedTo          QueueItem[]             @relation("AssignedTo")
  queueItemApprovedBy          QueueItem[]             @relation("ApprovedBy")
  queueComment                 QueueComment[]
  emailTo                      QueueItem[]
  popselRequestedBy            PopulationSelection[]
  dataQueueItemRequestedBy     DataQueueItem[]         @relation("DataRequestedBy")
  dataQueueItemAssignedTo      DataQueueItem[]         @relation("DataAssignedTo")
  dataQueueComment             DataQueueComment[]
  trainingSchedule             TrainingSchedule[]
  masterCalendarPrimaryOwner   MasterCalendarItem[]    @relation("PrimaryOwner")
  masterCalendarSecondaryOwner MasterCalendarItem[]
  masterCalendarComment        MasterCalendarComment[]
  standardsProceduresOwner     Procedure[]
  userProfileReport            UserProfile[]           @relation("DirectReport")
  lettersOwnedBy               Letter[]                @relation("LettersOwnedBy")
  lettersEditedBy              Letter[]                @relation("LettersEditedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  titleId       Int
  roleId        Int
  userProfileId String?
}

model QueueItem {
  id           String         @id @default(uuid())
  priority     Priority       @relation(fields: [priorityId], references: [id])
  title        String
  requestedBy  UserProfile    @relation("RequestedBy", fields: [requestedById], references: [id])
  assignedTo   UserProfile?   @relation("AssignedTo", fields: [assignedToId], references: [id])
  approvedBy   UserProfile?   @relation("ApprovedBy", fields: [userProfileId], references: [id])
  requestType  RequestType    @relation(fields: [requestTypeId], references: [id])
  emailTo      UserProfile[]
  comments     QueueComment[]
  dateNeeded   DateTime
  delayPosting DateTime?
  postTo       String?
  approved     Boolean        @default(false)
  complete     Boolean        @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  priorityId    Int
  requestedById String
  assignedToId  String?
  requestTypeId Int
  userProfileId String?
}

model QueueComment {
  id          String      @id @default(uuid())
  userProfile UserProfile @relation(fields: [userProfileId], references: [id])
  content     String
  queueItem   QueueItem   @relation(fields: [queueId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  queueId       String
  userProfileId String
}

model DataQueueItem {
  id                String             @id @default(uuid())
  priority          Priority           @relation(fields: [priorityId], references: [id])
  title             String
  requestType       DataRequestType    @relation(fields: [dataRequestTypeId], references: [id])
  requestedBy       UserProfile        @relation("DataRequestedBy", fields: [requestedById], references: [id])
  assignedTo        UserProfile?       @relation("DataAssignedTo", fields: [assignedToId], references: [id])
  comments          DataQueueComment[]
  dateNeeded        DateTime
  delayBatchPosting DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  priorityId        Int
  dataRequestTypeId Int
  requestedById     String
  assignedToId      String?
}

model DataQueueComment {
  id            String        @id @default(uuid())
  userProfile   UserProfile   @relation(fields: [userProfileId], references: [id])
  content       String
  dataQueueItem DataQueueItem @relation(fields: [dataQueueItemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userProfileId   String
  dataQueueItemId String
}

model PopulationSelection {
  id              String      @id @default(uuid())
  aidYear         AidYear     @relation(fields: [aidYearId], references: [id])
  termCode        String
  application     Application @relation(fields: [applicationId], references: [id])
  letterCode      LetterCode  @relation(fields: [letterCodeId], references: [id])
  selectionId     String
  bannerCreatorId String
  bannerUserId    String
  letterCount     Int
  addressType     AddressType @relation(fields: [addressTypeId], references: [id])
  requestedBy     UserProfile @relation(fields: [userProfileId], references: [id])
  firstTerm       String
  secondTerm      String
  thirdTerm       String
  priorAidYear    String
  priorFallTerm   String
  priorSpringTerm String
  paidDate        DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  aidYearId     Int
  applicationId Int
  letterCodeId  Int
  userProfileId String
  addressTypeId Int
}

model MasterCalendarItem {
  id              String                  @id @default(uuid())
  title           String
  dueDate         DateTime
  completionDate  DateTime?
  type            MasterCalendarType      @relation(fields: [masterCalendarTypeId], references: [id])
  primaryOwner    UserProfile             @relation("PrimaryOwner", fields: [userProfileId], references: [id])
  secondaryOwners UserProfile[]
  comments        MasterCalendarComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  masterCalendarTypeId Int
  userProfileId        String
}

model MasterCalendarComment {
  id             String             @id @default(uuid())
  userProfile    UserProfile        @relation(fields: [userProfileId], references: [id])
  content        String
  masterCalendar MasterCalendarItem @relation(fields: [masterCalendarId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userProfileId    String
  masterCalendarId String
}

model TrainingSchedule {
  id       String        @id @default(uuid())
  name     String        @unique
  date     DateTime
  weekday  String
  trainers UserProfile[]
  videos   TrainingUrl[]
}

model TrainingUrl {
  id  String @id @default(uuid())
  url String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  TrainingSchedule   TrainingSchedule? @relation(fields: [trainingScheduleId], references: [id])
  trainingScheduleId String?
}

model Procedure {
  id        String      @id @default(uuid())
  aidYear   AidYear     @relation(fields: [aidYearId], references: [id])
  fileName  String
  extension String
  owner     UserProfile @relation(fields: [userProfileId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  aidYearId     Int
  userProfileId String
}

model Letter {
  id             String       @id @default(uuid())
  description    String
  letterCode     LetterCode   @relation(fields: [letterCodeId], references: [id])
  letterType     LetterType   @relation(fields: [letterTypeId], references: [id])
  letterGroup    LetterGroup  @relation(fields: [letterGroupId], references: [id])
  weeklyTapeLoad Boolean
  staffInRuamail Boolean
  owner          UserProfile  @relation("LettersOwnedBy", fields: [userProfileId], references: [id])
  lastEditedBy   UserProfile? @relation("LettersEditedBy", fields: [editedById], references: [id])
  letterCategory String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  letterCodeId  Int
  letterTypeId  Int
  letterGroupId Int
  userProfileId String
  editedById    String?
}

model LetterType {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  letters Letter[]
}

model LetterGroup {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  Letter Letter[]
}

model Form {
  id      String  @id @default(uuid())
  aidYear AidYear @relation(fields: [aidYearId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  aidYearId Int
}

model Role {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  userProfile UserProfile[]
}

model Team {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  userProfile UserProfile[]
}

model Title {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  userProfile UserProfile[]
}

model RequestType {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  queueItem QueueItem[]
}

model DataRequestType {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  dataQueueItem DataQueueItem[]
}

model MasterCalendarType {
  id                 Int                  @id @default(autoincrement())
  type               String               @unique
  name               String
  masterCalendarItem MasterCalendarItem[]
}

model Priority {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  queueItem     QueueItem[]
  dataQueueItem DataQueueItem[]
}

model AidYear {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  populationSelection PopulationSelection[]
  standardsProcedures Procedure[]
  forms               Form[]
}

model Application {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  populationSelection PopulationSelection[]
}

model LetterCode {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  populationSelection PopulationSelection[]
  letters             Letter[]
}

model AddressType {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  populationSelection PopulationSelection[]
}
